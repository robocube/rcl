{
  TestBlock:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("BlockTest")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCVector<string> sv = new RCString ("x", "y", "z");
            RCVector<double> dv = new RCDouble (1, 2, 3);
            RCVector<bool> bv = new RCBoolean (true, false, true);
            RCBlock a = new RCBlock (null, "a", ":", sv);
            RCBlock b = new RCBlock (a, "b", ":", dv);
            RCBlock c = new RCBlock (b, "c", ":", bv);
            Assert.AreEqual (3, c.Count);
            Assert.AreSame (sv, c.Get ("a"));
            Assert.AreSame (dv, c.Get ("b"));
            Assert.AreSame (bv, c.Get ("c"));
            Assert.AreSame (sv, c.Get (0));
            Assert.AreSame (dv, c.Get (1));
            Assert.AreSame (bv, c.Get (2));
            Assert.AreEqual ("{a:\"x\" \"y\" \"z\" b:1.0 2.0 3.0 c:true false true}", c.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.BlockTest {}
    }
  }
  TestMinimalOperator:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestMinimalOperator")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> x = new RCDouble (100, 1000, 10000);
            RCVector<double> y = new RCDouble (1, 2, 3);
            RCOperator v = testRunner.New ("+", x, y);
            RCValue val = testRunner.Run (v);
            Assert.AreEqual (new RCDouble (101, 1002, 10003), val);
            Assert.AreEqual ("101.0 1002.0 10003.0", val.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestMinimalOperator {}
    }
  }
  TestNestedOperator:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestNestedOperator")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> x = new RCDouble (100, 1000, 10000);
            RCVector<double> y = new RCDouble (110, 1200, 13000);
            RCOperator pch = testRunner.New ("/", testRunner.New ("-", y, x), x);
            RCValue val = testRunner.Run (pch);
            Assert.AreEqual (new RCDouble (0.1, 0.2, 0.3), val);
            Assert.AreEqual ("0.1 0.2 0.3", val.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestNestedOperator {}
    }
  }
  TestTwoSidedNestedOperator:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestTwoSidedNestedOperator")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> tp = new RCDouble (10.00, 10.01, 10.02);
            RCVector<double> ts = new RCDouble (100, 500, 100);
            RCOperator vwp = testRunner.New ("/",
                               testRunner.New ("sum", testRunner.New ("*", tp, ts)),
                               testRunner.New ("sum", ts));
            RCValue val = testRunner.Run (vwp);
            Assert.AreEqual (new RCDouble ((1000.0 + 5005.0 + 1002.0) / 700.0), val);
            Assert.AreEqual ("10.01", val.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestTwoSidedNestedOperator {}
    }
  }
  TestScalarsRight:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestScalarsRight")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> x = new RCDouble (100, 200, 300);
            RCVector<double> two = new RCDouble (2);
            RCOperator add = testRunner.New ("+", x, two);
            RCOperator sub = testRunner.New ("-", x, two);
            RCOperator mult = testRunner.New ("*", x, two);
            RCOperator div = testRunner.New ("/", x, two);
            RCVector<double> addResult = (RCVector<double>) testRunner.Run (add);
            RCVector<double> subResult = (RCVector<double>) testRunner.Run (sub);
            RCVector<double> multResult = (RCVector<double>) testRunner.Run (mult);
            RCVector<double> divResult = (RCVector<double>) testRunner.Run (div);
            Assert.AreEqual (new RCDouble (102, 202, 302), addResult);
            Assert.AreEqual ("102.0 202.0 302.0", addResult.ToString());
            Assert.AreEqual (new RCDouble (98, 198, 298), subResult);
            Assert.AreEqual ("98.0 198.0 298.0", subResult.ToString());
            Assert.AreEqual (new RCDouble (200.0, 400.0, 600.0), multResult);
            Assert.AreEqual ("200.0 400.0 600.0", multResult.ToString ());
            Assert.AreEqual (new RCDouble (50, 100, 150), divResult);
            Assert.AreEqual ("50.0 100.0 150.0", divResult.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestScalarsRight {}
    }
  }
  TestScalarsLeft:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestScalarsLeft")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> two = new RCDouble (2);
            RCVector<double> x = new RCDouble (100, 200, 300);
            RCOperator add = testRunner.New ("+", two, x);
            RCOperator sub = testRunner.New ("-", two, x);
            RCOperator mult = testRunner.New ("*", two, x);
            RCOperator div = testRunner.New ("/", two, x);
            RCVector<double> addResult = (RCVector<double>) testRunner.Run (add);
            RCVector<double> subResult = (RCVector<double>) testRunner.Run (sub);
            RCVector<double> multResult = (RCVector<double>) testRunner.Run (mult);
            RCVector<double> divResult = (RCVector<double>) testRunner.Run (div);
            Assert.AreEqual (new RCDouble (102, 202, 302), addResult);
            Assert.AreEqual ("102.0 202.0 302.0", addResult.ToString());
            Assert.AreEqual (new RCDouble (-98, -198, -298), subResult);
            Assert.AreEqual ("-98.0 -198.0 -298.0", subResult.ToString());
            Assert.AreEqual (new RCDouble (200, 400, 600), multResult);
            Assert.AreEqual ("200.0 400.0 600.0", multResult.ToString());
            Assert.AreEqual (.02, divResult[0]);
            Assert.AreEqual (.01, divResult[1]);
            Assert.AreEqual (.00666, divResult[2]);
            Assert.AreEqual ("0.02 0.01 0.00666666666666667", divResult.ToString());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestScalarsLeft {}
    }
  }
  TestReferencesInBlock:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestReferencesInBlock")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCVector<double> two = new RCDouble (2);
            RCVector<double> x = new RCDouble (100, 200, 300);
            RCOperator add = testRunner.New ("+", two, x);
            RCOperator sub = testRunner.New ("-", two, x);
            RCOperator mult = testRunner.New ("*", two, x);
            RCOperator div = testRunner.New ("/", two, x);
            RCVector<double> addResult = (RCVector<double>) testRunner.Run (add);
            RCVector<double> subResult = (RCVector<double>) testRunner.Run (sub);
            RCVector<double> multResult = (RCVector<double>) testRunner.Run (mult);
            RCVector<double> divResult = (RCVector<double>) testRunner.Run (div);
            Assert.AreEqual (new RCDouble (102, 202, 302), addResult);
            Assert.AreEqual ("102.0 202.0 302.0", addResult.ToString());
            Assert.AreEqual (new RCDouble (-98, -198, -298), subResult);
            Assert.AreEqual ("-98.0 -198.0 -298.0", subResult.ToString());
            Assert.AreEqual (new RCDouble (200, 400, 600), multResult);
            Assert.AreEqual ("200.0 400.0 600.0", multResult.ToString());
            Assert.AreEqual (.02, divResult[0]);
            Assert.AreEqual (.01, divResult[1]);
            Assert.AreEqual (.00666, divResult[2]);
            Assert.AreEqual ("0.02 0.01 0.00666666666666667", divResult.ToString());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestReferencesInBlock {}
    }
  }
  TestYieldFromBlock:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestYieldFromBlock")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCBlock bp = new RCBlock (null, "bp", ":", new RCDouble (10.00, 10.01, 10.02, 10.01, 10.00));
            RCBlock ap = new RCBlock (bp, "ap", ":", new RCDouble(10.02, 10.03, 10.03, 10.02, 10.01));
            RCBlock bbo = new RCBlock (null, "bbo", ":", ap);
            RCBlock sprd = new RCBlock (bbo, "sprd", ":", testRunner.New ("-", new RCReference ("bbo.ap"), new RCReference ("bbo.bp")));
            RCBlock sprdpch = new RCBlock (sprd, "sprdbps", "<-", testRunner.New ("/", new RCReference ("sprd"), new RCReference ("bbo.bp")));
            RCValue val = testRunner.Run (sprdpch);
            RCVector<double> v = val as RCVector<double>;
            Assert.IsNotNull (v);
            Assert.AreEqual (.02 / 10.00, v[0]);
            Assert.AreEqual (.02 / 10.01, v[1]);
            Assert.AreEqual (.01 / 10.02, v[2]);
            Assert.AreEqual (.01 / 10.01, v[3]);
            Assert.AreEqual (.01 / 10.00, v[4]);
            Assert.AreEqual ("0.00199999999999996 0.00199800199800196 0.000998003992015947 0.000999000999000978 0.000999999999999979", v.ToString());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestYieldFromBlock {}
    }
  }
  TestRawNames:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestRawNames")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCBlock k = (RCBlock) RCSystem.Parse ("{'Set-Cookie':\"abcdefg\"}");
            Assert.AreEqual ("'Set-Cookie'", k.GetName (0).Name);
            Assert.AreEqual ("Set-Cookie", k.GetName (0).RawName);
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestRawNames {}
    }
  }
  TestEscapedNames:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestEscapedNames")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCBlock k = new RCBlock (RCBlock.Empty, "foo-bar", ":", new RCString ("baz"));
            Assert.AreEqual ("'foo-bar'", k.GetName (0).Name);
            Assert.AreEqual ("foo-bar", k.GetName (0).RawName);
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestEscapedNames {}
    }
  }
  TestEscapedNumberNames:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestEscapedNumberNames")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCBlock k = new RCBlock (RCBlock.Empty, "0", ":", new RCString ("foo"));
            Assert.AreEqual ("'0'", k.GetName (0).Name);
            Assert.AreEqual ("0", k.GetName (0).RawName);
            Assert.AreEqual ("{'0':\"foo\"}", k.Format (RCFormat.Default));
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestEscapedNumberNames {}
    }
  }
  TestProgrammaticPartExtraction:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestProgrammaticPartExtraction")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            bool fragment;
            RCSymbol symbol = (RCSymbol) RCSystem.Parse ("#0,'this-is-a-test'", out fragment);
            Assert.AreEqual ("this-is-a-test", (string) symbol[0].Part (1));
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestProgrammaticPartExtraction {}
    }
  }
  TestIncrementalVectorParsing:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestIncrementalVectorParsing")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCRunner testRunner = new RCRunner ();
            RCValue vector0 = testRunner.Read ("1 2 3");
            RCValue vector1 = testRunner.Read ("4 5 6");
            Assert.AreEqual ("1 2 3", vector0.ToString ());
            Assert.AreEqual ("1 2 3 4 5 6", vector1.ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestIncrementalVectorParsing {}
    }
  }
  TestProgrammaticSymbolBuilding:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestProgrammaticSymbolBuilding")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            Assert.AreEqual ("#1,2,3", RCSymbolScalar.From ((long) 1, (long) 2, (long) 3).ToString ());
            Assert.AreEqual ("#1,2,3", RCSymbolScalar.From ((long) 1, (int) 2, (long) 3).ToString ());
            Assert.AreEqual ("#a,b,c", RCSymbolScalar.From ("a", "b", "c").ToString ());
            Assert.AreEqual ("#'a-b',c,d", RCSymbolScalar.From ("a-b", "c", "d").ToString ());
            Assert.AreEqual ("#a_b,c,d", RCSymbolScalar.From ("a_b", "c", "d").ToString ());
            Assert.AreEqual ("#'1','2','3'", RCSymbolScalar.From ("1", "2", "3").ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestProgrammaticSymbolBuilding {}
    }
  }
  TestProgrammaticSymbolBuildingEmpty:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestProgrammaticSymbolBuildingEmpty")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            RCL.Kernel.Assert.AreEqual ("#", RCSymbolScalar.From ().ToString ());
          }
        }
      ?]
    }
    :Test.TestProgrammaticSymbolBuildingEmpty {}
  }
  TestProgrammaticSymbolBuildingWithIntFirst:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestProgrammaticSymbolBuildingWithIntFirst")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            Assert.AreEqual ("#1,2,3", RCSymbolScalar.From ((int) 1, (long) 2, (long) 3).ToString ());
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
    }
    :Test.TestProgrammaticSymbolBuildingWithIntFirst {}
  }
  TestMacroCtor:{
    src:{
      Test:& compile eval [?
        using System;
        using RCL.Kernel;
        public class TestClass
        {
          [RCVerb ("TestMacroCtor")]
          public void EvalTest (RCRunner runner, RCClosure closure, RCBlock right)
          {
            Exception ex = null;
            try
            {
              runner.New ("+", null, null);
            }
            catch (ArgumentNullException argEx)
            {
              ex = argEx;
            }
            Assert.IsNotNull (ex);
            runner.Yield (closure, RCBlock.Empty);
          }
        }
      ?]
      :Test.TestMacroCtor {}
    }
  }
}
